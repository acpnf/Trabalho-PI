#include "raylib.h"
#include "torres.h"

#define TILE_SIZE 64
#define LINHAS_MAPA 10
#define COLUNAS_MAPA 20

int main(void)
{
    const int largura = TILE_SIZE * COLUNAS_MAPA;
    const int altura = TILE_SIZE * LINHAS_MAPA;

    InitWindow(largura, altura, "festa da salsicha");
    SetTargetFPS(60);

    Texture2D grama_textura = LoadTexture("grama.png");
    Texture2D caminho_textura = LoadTexture("caminho.png");

    //mapa corrigido do Bloons Tower Defense 1 (0 = grama, 1 = caminho)
    int mapa[LINHAS_MAPA][COLUNAS_MAPA] = {
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
        {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0},
        {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0},
        {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0},
        {0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0},
        {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0},
        {0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0},
        {0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0},
        {0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0},
        {1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0}
    };

    //posição do jogador na entrada (início do caminho)
    int jogadorX = 0;
    int jogadorY = 9;

    // Variáveis do sistema de torres
    Soldado torres[50];
    int num_torres = 0;
    int dinheiro = 100;

    while (!WindowShouldClose())
    {
        //movimentação do jogador
        if (IsKeyPressed(KEY_RIGHT) && jogadorX < COLUNAS_MAPA - 1) jogadorX++;
        if (IsKeyPressed(KEY_LEFT) && jogadorX > 0) jogadorX--;
        if (IsKeyPressed(KEY_DOWN) && jogadorY < LINHAS_MAPA - 1) jogadorY++;
        if (IsKeyPressed(KEY_UP) && jogadorY > 0) jogadorY--;

        // Construção de torres com clique
        if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)) {
            Vector2 mousePos = GetMousePosition();
            int gridX = mousePos.x / TILE_SIZE;
            int gridY = mousePos.y / TILE_SIZE;
            
            if (mapa[gridY][gridX] == 0 && dinheiro >= 10 && num_torres < 50) {
                torres[num_torres++] = criar_soldado(
                    (Vector2){gridX * TILE_SIZE + TILE_SIZE/2, 
                             gridY * TILE_SIZE + TILE_SIZE/2},
                    largura
                );
                dinheiro -= 10;
            }
        }

        BeginDrawing();
            ClearBackground(RAYWHITE);

            //desenha o mapa em formato de grade
            for (int y = 0; y < LINHAS_MAPA; y++)
            {
                for (int x = 0; x < COLUNAS_MAPA; x++)
                {
                    Rectangle janela = { x * TILE_SIZE, y * TILE_SIZE, TILE_SIZE, TILE_SIZE };

                    if (mapa[y][x] == 1)
                        DrawTextureRec(caminho_textura, (Rectangle){ 0, 0, TILE_SIZE, TILE_SIZE }, 
                                      (Vector2){ x * TILE_SIZE, y * TILE_SIZE }, WHITE);
                    else
                        DrawTextureRec(grama_textura, (Rectangle){ 0, 0, TILE_SIZE, TILE_SIZE }, 
                                      (Vector2){ x * TILE_SIZE, y * TILE_SIZE }, WHITE);
                }
            }

            // Desenha torres
            for (int i = 0; i < num_torres; i++) {
                DrawCircleV(torres[i].posicao, 20, RED);
            }

            // Desenha jogador
            Color azul_translu = (Color){ 0, 0, 255, 100 };
            Color vermelho_translu = (Color){ 255, 0, 0, 100 };
            Color cor_jogador = (mapa[jogadorY][jogadorX] == 1) ? vermelho_translu : azul_translu;
            DrawRectangle(jogadorX * TILE_SIZE, jogadorY * TILE_SIZE, TILE_SIZE, TILE_SIZE, cor_jogador);

            // UI
            DrawText(TextFormat("Torres: %d/50", num_torres), 10, 10, 20, BLACK);
            DrawText(TextFormat("Dinheiro: %d", dinheiro), 10, 40, 20, BLACK);

        EndDrawing();
    }

    // Libera recursos
    UnloadTexture(grama_textura);
    UnloadTexture(caminho_textura);
    liberar_torres();
    CloseWindow();
    
    return 0;
}
